local c = {
  bg = "#141415",
  inactiveBg = "#1c1c24",
  fg = "#cdcdcd",
  floatBorder = "#878787",
  line = "#252530",
  comment = "#606079",
  builtin = "#b4d4cf",
  func = "#c48282",
  string = "#e8b589",
  number = "#e0a363",
  property = "#c3c3d5",
  constant = "#aeaed1",
  parameter = "#bb9dbd",
  visual = "#333738",
  error = "#d8647e",
  warning = "#f3be7c",
  hint = "#7e98e8",
  operator = "#90a0b5",
  keyword = "#6e94b2",
  type = "#9bb4bc",
  search = "#405065",
  plus = "#7fa563",

  diffAdd = "#293125",
  diffChange = "#41362a",
  diffDelete = "#3b242a",
}

---@type table<string,vim.api.keyset.highlight>
local highlights = {
  ColorColumn = { bg = c.line },
  Conceal = { fg = c.func },
  CurSearch = { fg = c.fg, bg = c.search },
  CursorColumn = { bg = c.line },
  CursorLine = { bg = c.line },
  CursorLineNr = { fg = c.fg },
  Debug = { fg = c.constant },
  debugPC = { fg = c.bg, bg = c.fg },
  debugBreakpoint = { fg = c.bg, bg = c.operator },
  Directory = { fg = c.hint },
  OkMsg = { fg = c.plus },
  ErrorMsg = { fg = c.error, bold = true },
  EndOfBuffer = { fg = c.comment },
  FloatBorder = { fg = c.floatBorder, bg = c.bg },
  FloatTitle = { fg = c.floatBorder, bg = c.bg },
  FloatFooter = { fg = c.floatBorder, bg = c.bg },
  Folded = { fg = c.comment, bg = c.line },
  FoldColumn = { fg = c.comment, bg = c.bg },
  IncSearch = { fg = c.bg, bg = c.search },
  LineNr = { fg = c.comment },
  MatchParen = { fg = c.fg, bg = c.visual },
  MoreMsg = { fg = c.func, bold = true },
  MsgSeparator = { fg = c.string, bg = c.line, bold = true },
  NonText = { fg = c.comment },
  Normal = { fg = c.fg, bg = c.bg },
  NormalFloat = { fg = c.fg, bg = c.bg },
  ModeMsg = { fg = c.string },
  Pmenu = { fg = c.fg },
  PmenuSel = { fg = c.constant, bg = c.line },
  PmenuThumb = { bg = c.comment },
  PmenuBorder = { fg = c.floatBorder },
  Question = { fg = c.constant },
  QuickFixLine = { fg = c.func, underline = true },
  Search = { fg = c.fg, bg = c.search },
  SignColumn = { fg = c.fg, bg = c.bg },
  SpecialKey = { fg = c.comment },
  SpellBad = { undercurl = true },
  SpellCap = { undercurl = true },
  SpellLocal = { undercurl = true },
  SpellRare = { undercurl = true },
  StatusLine = { fg = c.fg, bg = c.inactiveBg },
  StatusLineTerm = { fg = c.fg, bg = c.inactiveBg },
  StatusLineNC = { fg = c.comment },
  StatusLineTermNC = { fg = c.comment },
  Substitute = { fg = c.type, bg = c.visual },
  TabLine = { fg = c.fg, bg = c.line },
  TabLineFill = { fg = c.comment, bg = c.line },
  TabLineSel = { fg = c.bg, bg = c.fg },
  Terminal = { fg = c.fg, bg = c.bg },
  ToolbarButton = { fg = c.bg, bg = c.visual },
  ToolbarLine = { fg = c.fg },
  Visual = { bg = c.visual },
  VisualNOS = { bg = c.comment, undercurl = true },
  WarningMsg = { fg = c.warning, bold = true },
  Whitespace = { fg = c.comment },
  WildMenu = { fg = c.bg, bg = c.func },
  WinSeparator = { fg = c.floatBorder },
  Added = { fg = c.plus },
  Changed = { fg = c.warning },
  Removed = { fg = c.error },
  DiffAdd = { bg = c.diffDelete },
  DiffChange = { bg = c.diffChange },
  DiffDelete = { bg = c.diffDelete },
  DiffText = { fg = c.fg },
  DiffFile = { fg = c.keyword },
  DiffIndexLine = { fg = c.comment },

  Boolean = { fg = c.number, bold = true },
  Character = { fg = c.string },
  Comment = { fg = c.comment },
  Conditional = { fg = c.keyword },
  Constant = { fg = c.constant },
  Define = { fg = c.comment },
  Delimiter = { fg = c.fg },
  Error = { fg = c.error, bold = true },
  Exception = { fg = c.keyword },
  Float = { fg = c.number },
  Function = { fg = c.func },
  Identifier = { fg = c.constant },
  Include = { fg = c.keyword },
  Keyword = { fg = c.keyword },
  Label = { fg = c.keyword },
  Macro = { fg = c.constant },
  Number = { fg = c.number },
  Operator = { fg = c.operator },
  PreCondit = { fg = c.comment },
  PreProc = { fg = c.constant },
  Repeat = { fg = c.keyword },
  Special = { fg = c.builtin },
  SpecialChar = { fg = c.keyword },
  SpecialComment = { fg = c.keyword },
  Statement = { fg = c.keyword },
  StorageClass = { fg = c.constant },
  String = { fg = c.string },
  Structure = { fg = c.constant },
  Tag = { fg = c.builtin },
  Title = { fg = c.property },
  Todo = { fg = c.func },
  Type = { fg = c.type },
  Typedef = { fg = c.constant },

  ["@attribute"] = { fg = c.constant },
  ["@boolean"] = { fg = c.number, bold = true },
  ["@character"] = { fg = c.string },
  ["@character.special"] = { fg = c.keyword },
  ["@constant"] = { fg = c.constant },
  ["@constant.builtin"] = { fg = c.number, bold = true },
  ["@constructor"] = { fg = c.constant },
  ["@constructor.lua"] = { fg = c.type },
  ["@text.diff.add"] = { bg = c.diffAdd },
  ["@text.diff.delete"] = { bg = c.diffDelete },
  ["@diff.plus"] = { bg = c.diffAdd },
  ["@diff.delta"] = { bg = c.diffChange },
  ["@diff.minus"] = { bg = c.diffDelete },
  ["@function"] = { fg = c.func },
  ["@function.builtin"] = { fg = c.func },
  ["@function.call"] = { fg = c.parameter },
  ["@function.macro"] = { fg = c.constant },
  ["@function.method.call"] = { fg = c.type },
  ["@keyword"] = { fg = c.keyword },
  ["@keyword.import"] = { fg = c.constant },
  ["@label"] = { fg = c.keyword },
  ["@markup"] = { fg = c.fg },
  ["@markup.heading"] = { fg = c.keyword, bold = true },
  ["@markup.italic"] = { fg = c.fg, italic = true },
  ["@markup.link"] = { fg = c.string },
  ["@markup.link.uri"] = { fg = c.string, underline = true },
  ["@markup.list"] = { fg = c.func },
  ["@markup.math"] = { fg = c.string },
  ["@markup.quote.markdown"] = { fg = c.comment },
  ["@markup.raw"] = { fg = c.constant },
  ["@markup.strikethrough"] = { fg = c.comment, strikethrough = true },
  ["@markup.strong"] = { fg = c.fg, bold = true },
  ["@markup.underline"] = { fg = c.fg, underline = true },
  ["@module"] = { fg = c.constant },
  ["@operator"] = { fg = c.operator },
  ["@property"] = { fg = c.property },
  ["@punctuation.special"] = { fg = c.keyword },
  ["@string"] = { fg = c.string },
  ["@string.escape"] = { fg = c.keyword },
  ["@string.regexp"] = { fg = c.keyword },
  ["@string.special.symbol"] = { fg = c.constant },
  ["@string.special.url"] = { fg = c.func },
  ["@tag.attribute"] = { fg = c.constant },
  ["@tag.delimiter"] = { fg = c.fg },
  ["@type"] = { fg = c.type },
  ["@type.builtin"] = { fg = c.builtin, bold = true },
  ["@type.declaration"] = { fg = c.constant },
  ["@type.definition"] = { fg = c.constant },
  ["@variable"] = { fg = c.fg },
  ["@variable.builtin"] = { fg = c.builtin },
  ["@variable.member"] = { fg = c.builtin },
  ["@variable.parameter"] = { fg = c.parameter },

  TreesitterContext = { bg = c.line },
  TreesitterContextLineNumber = { fg = c.comment, bg = c.line },

  DiagnosticError = { fg = c.error, bold = true },
  DiagnosticHint = { fg = c.hint },
  DiagnosticInfo = { fg = c.constant },
  DiagnosticOk = { fg = c.plus },
  DiagnosticUnderlineError = { undercurl = true, sp = c.error },
  DiagnosticUnderlineHint = { undercurl = true, sp = c.hint },
  DiagnosticUnderlineInfo = { undercurl = true, sp = c.constant },
  DiagnosticUnderlineOk = { undercurl = true, sp = c.plus },
  DiagnosticUnderlineWarn = { undercurl = true, sp = c.warning },
  DiagnosticVirtualTextError = { fg = c.error, bold = true },
  DiagnosticVirtualTextHint = { fg = c.hint },
  DiagnosticVirtualTextInfo = { fg = c.constant },
  DiagnosticVirtualTextOk = { fg = c.plus },
  DiagnosticVirtualTextWarn = { fg = c.warning, bold = true },
  DiagnosticWarn = { fg = c.warning, bold = true },
  LspCodeLens = { fg = c.comment },
  LspCodeLensSeparator = { fg = c.comment },
  LspCxxHlGroupEnumConstant = { fg = c.type },
  LspCxxHlGroupMemberVariable = { fg = c.type },
  LspCxxHlGroupNamespace = { fg = c.func },
  LspCxxHlSkippedRegion = { fg = c.comment },
  LspCxxHlSkippedRegionBeginEnd = { fg = c.operator },
  LspReferenceRead = { bg = c.comment },
  LspReferenceText = { bg = c.comment },
  LspReferenceWrite = { bg = c.comment },

  ["@lsp.type.builtinConstant"] = { fg = c.number, bold = true },
  ["@lsp.type.builtinType"] = { fg = c.builtin, bold = true },
  ["@lsp.type.class"] = { fg = c.constant },
  ["@lsp.type.comment"] = { fg = c.comment },
  ["@lsp.type.enum"] = { fg = c.constant },
  ["@lsp.type.enumMember"] = { fg = c.builtin },
  ["@lsp.type.function"] = { fg = c.parameter },
  ["@lsp.type.generic"] = { fg = c.type },
  ["@lsp.type.interface"] = { fg = c.constant },
  ["@lsp.type.macro"] = { fg = c.constant },
  ["@lsp.type.namespace"] = { fg = c.constant },
  ["@lsp.type.parameter"] = { fg = c.parameter },
  ["@lsp.type.property"] = { fg = c.type },
  ["@lsp.type.selfParameter"] = { fg = c.builtin },
  ["@lsp.type.typeParameter"] = { fg = c.constant },
  ["@lsp.type.variable"] = { fg = c.constant },
  ["@lsp.typemod.function"] = { fg = c.parameter },
  ["@lsp.typemod.function.builtin"] = { fg = c.func },
  ["@lsp.typemod.function.defaultLibrary"] = { fg = c.func },
  ["@lsp.typemod.function.definition"] = { fg = c.func },
  ["@lsp.typemod.variable.defaultLibrary"] = { fg = c.number, bold = true },
  ["@lsp.typemod.variable.definition"] = { fg = c.property },

  MiniTrailspace = { bg = c.error },
}

vim.g.terminal_color_0 = c.line
vim.g.terminal_color_1 = c.error
vim.g.terminal_color_2 = c.plus
vim.g.terminal_color_3 = c.warning
vim.g.terminal_color_4 = c.keyword
vim.g.terminal_color_5 = c.parameter
vim.g.terminal_color_6 = c.constant
vim.g.terminal_color_7 = c.fg
vim.g.terminal_color_8 = c.comment
vim.g.terminal_color_9 = "#e08398"
vim.g.terminal_color_10 = "#99b782"
vim.g.terminal_color_11 = "#f5cb96"
vim.g.terminal_color_12 = "#8ba9c1"
vim.g.terminal_color_13 = "#c9b1ca"
vim.g.terminal_color_14 = "#bebeda"
vim.g.terminal_color_15 = "#d7d7d7"

vim.g.colors_name = "vague"
vim.cmd.highlight("clear")
if vim.fn.has("syntax_on") then vim.cmd.syntax("reset") end
for group, opts in pairs(highlights) do
  vim.api.nvim_set_hl(0, group, opts)
end
